/**  @file
  ql_api_spi.h

  @brief
  This file is used to define bt api for different Quectel Project.

*/

/*================================================================
  Copyright (c) 2020 Quectel Wireless Solution, Co., Ltd.  All Rights Reserved.
  Quectel Wireless Solution Proprietary and Confidential.
=================================================================*/
/*=================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

WHEN              WHO         WHAT, WHERE, WHY
------------     -------     -------------------------------------------------------------------------------
=================================================================*/


#ifndef QL_API_SPI_H
#define QL_API_SPI_H
#include "ql_api_common.h"


#ifdef __cplusplus
extern "C" {
#endif


/*========================================================================
 *  Variable Definition
 *========================================================================*/
#if 0
#define QL_SPI1_CS_PIN                  134
#define QL_SPI1_CS_FUNC                 0x2
#define QL_SPI1_CLK_PIN                 133
#define QL_SPI1_CLK_FUNC                0x2
#define QL_SPI1_DO_PIN                  132
#define QL_SPI1_DO_FUNC                 0x2
#define QL_SPI1_DI_PIN                  131
#define QL_SPI1_DI_FUNC                 0x2
#else
#define QL_SPI1_CS_PIN                  37                  //ÂºïËÑöÂè∑
#define QL_SPI1_CS_FUNC                 0x1                 //Ê≠§ÂºïËÑöÈÄâÁî®Á¨¨Âá†ÂäüËÉΩÔºåÈÄâÁî®Á¨¨1ÂäüËÉΩ
#define QL_SPI1_CLK_PIN                 40
#define QL_SPI1_CLK_FUNC                0x1
#define QL_SPI1_DO_PIN                  38
#define QL_SPI1_DO_FUNC                 0x1
#define QL_SPI1_DI_PIN                  39
#define QL_SPI1_DI_FUNC                 0x1
#endif

#if 0
#define QL_SPI2_CS_PIN                  32
#define QL_SPI2_CS_FUNC                 0x7
#define QL_SPI2_CLK_PIN                 30
#define QL_SPI2_CLK_FUNC                0x7
#define QL_SPI2_DO_PIN                  29
#define QL_SPI2_DO_FUNC                 0x7
#define QL_SPI2_DI_PIN                  28
#define QL_SPI2_DI_FUNC                 0x7
#else
#define QL_SPI2_CS_PIN                  26
#define QL_SPI2_CS_FUNC                 0x2
#define QL_SPI2_CLK_PIN                 27
#define QL_SPI2_CLK_FUNC                0x2
#define QL_SPI2_DO_PIN                  24
#define QL_SPI2_DO_FUNC                 0x2
#define QL_SPI2_DI_PIN                  25
#define QL_SPI2_DI_FUNC                 0x2
#endif

/****************************  error code about ql spi    ***************************/
typedef enum
{
	QL_SPI_SUCCESS                  =   0,
    
    QL_SPI_ERROR                    =   1 | (QL_COMPONENT_BSP_SPI << 16),   //SPIÊÄªÁ∫øÂÖ∂‰ªñÈîôËØØ
    QL_SPI_PARAM_TYPE_ERROR,                        //ÂèÇÊï∞Á±ªÂûãÈîôËØØ
    QL_SPI_PARAM_DATA_ERROR,                        //ÂèÇÊï∞Êï∞ÊçÆÈîôËØØ
    QL_SPI_PARAM_ACQUIRE_ERROR,                     //ÂèÇÊï∞Êó†Ê≥ïËé∑Âèñ
    QL_SPI_PARAM_NULL_ERROR,                        //ÂèÇÊï∞NULLÈîôËØØ
    QL_SPI_DEV_NOT_ACQUIRE_ERROR,                   //Êó†Ê≥ïËé∑ÂèñSPIÊÄªÁ∫ø
    QL_SPI_PARAM_LENGTH_ERROR,                      //ÂèÇÊï∞ÈïøÂ∫¶ÈîôËØØ
    QL_SPI_MALLOC_MEM_ERROR,                        //Áî≥ËØ∑ÂÜÖÂ≠òÈîôËØØ
}ql_errcode_spi_e;

typedef enum
{
    QL_SPI_CS0 = 0,                                 //ÈÄâÊã©cs0‰∏∫SPIÁâáÈÄâCSÂºïËÑö
    QL_SPI_CS1,                                     //ÈÄâÊã©cs1‰∏∫SPIÁâáÈÄâCSÂºïËÑö
    QL_SPI_CS2,                                     //ÈÄâÊã©cs2‰∏∫SPIÁâáÈÄâCSÂºïËÑö
    QL_SPI_CS3,                                     //ÈÄâÊã©cs3‰∏∫SPIÁâáÈÄâCSÂºïËÑö
}ql_spi_cs_sel_e;

typedef enum
{
    QL_SPI_INPUT_FALSE,                             //SPI‰∏çÂÖÅËÆ∏ËæìÂÖ•ÔºàËØªÂèñÔºâ
    QL_SPI_INPUT_TURE,                              //SPIÂÖÅËÆ∏ËæìÂÖ•ÔºàËØªÂèñÔºâ
}ql_spi_input_mode_e;

typedef enum
{
    QL_SPI_PORT1,                                   //SPI1ÊÄªÁ∫ø
    QL_SPI_PORT2,                                   //SPI2ÊÄªÁ∫ø
}ql_spi_port_e;

typedef enum
{
    QL_SPI_CS_ACTIVE_HIGH,                          //SPIÊÄªÁ∫øÊìç‰ΩúÊó∂ÔºåCSËÑö‰∏∫È´ò
    QL_SPI_CS_ACTIVE_LOW,                           //SPIÊÄªÁ∫øÊìç‰ΩúÊó∂ÔºåCSËÑö‰∏∫‰Ωé
} ql_spi_cs_pol_e;
    
typedef enum
{
    QL_SPI_CPOL_LOW = 0,                            //ÈÄâÊã©‰∏äÂçáÊ≤øÊìç‰Ωú
    QL_SPI_CPOL_HIGH,                               //ÈÄâÊã©‰∏ãÈôçÊ≤øÊìç‰Ωú
} ql_spi_cpol_pol_e;

typedef enum
{
    QL_SPI_CPHA_1Edge,                              //Êó∂ÈíüÂª∂Êó∂‰∏Ä‰∏™ËæπÊ≤ø
    QL_SPI_CPHA_2Edge,                              //Êó∂ÈíüÂª∂Êó∂‰∏§‰∏™ËæπÊ≤ø
}ql_spi_cpha_pol_e;

typedef enum
{
    QL_SPI_DI_0 = 0,                                //ÈÄâÊã©DI0‰∏∫Êï∞ÊçÆËæìÂÖ•ÂºïËÑö
    QL_SPI_DI_1,                                    //ÈÄâÊã©DI1‰∏∫Êï∞ÊçÆËæìÂÖ•ÂºïËÑö
    QL_SPI_DI_2,                                    //ÈÄâÊã©DI2‰∏∫Êï∞ÊçÆËæìÂÖ•ÂºïËÑö
}ql_spi_input_sel_e;

typedef enum
{
    QL_SPI_DIRECT_POLLING = 0,                      //FIFOËØªÂÜôÔºåËΩÆËØ¢Á≠âÂæÖ
    QL_SPI_DIRECT_IRQ,                              //FIFOËØªÂÜôÔºå‰∏≠Êñ≠ÈÄöÁü•
    QL_SPI_DMA_POLLING,                             //DMAËØªÂÜôÔºåËΩÆËØ¢Á≠âÂæÖ
    QL_SPI_DMA_IRQ,                                 //DMAËØªÂÜôÔºå‰∏≠Êñ≠ÈÄöÁü•
}ql_spi_transfer_mode_e;

typedef enum
{	
	QL_SPI_CLK_INVALID=-1,                          //Êó†ÊïàÊó∂ÈíüÈÄâÊã©
	QL_SPI_CLK_781_25KHZ=0,                         //Êó∂ÈíüÔºö781.25K
	QL_SPI_CLK_1_5625MHZ,                           //Êó∂ÈíüÔºö1.5625M
	QL_SPI_CLK_3_125MHZ,                            //Êó∂ÈíüÔºö3.125M
	QL_SPI_CLK_6_25MHZ,                             //Êó∂ÈíüÔºö6.25M
	QL_SPI_CLK_12_5MHZ,                             //Êó∂ÈíüÔºö12.5M
	QL_SPI_CLK_25MHZ,                               //Êó∂ÈíüÔºö25M
	QL_SPI_CLK_50MHZ,                               //Êó∂ÈíüÔºö50M
	QL_SPI_CLK_MAX,                                 //Êó∂ÈíüÔºö100M
}ql_spi_clk_e;

typedef struct
{
    ql_spi_input_mode_e input_mode;
    ql_spi_port_e port;
    unsigned int framesize;
    ql_spi_clk_e spiclk;
    ql_spi_cs_pol_e cs_polarity0;
    ql_spi_cs_pol_e cs_polarity1;
    ql_spi_cpol_pol_e cpol;
    ql_spi_cpha_pol_e cpha;
    ql_spi_input_sel_e input_sel;
    ql_spi_transfer_mode_e transmode;
    ql_spi_cs_sel_e cs;
} ql_spi_config_s;

typedef enum
{
    QL_SPI_TRIGGER_1_DATA,                      //FIFOÊúâ1‰∏™Â≠óËäÇÔºåËß¶Âèë‰∏≠Êñ≠
    QL_SPI_TRIGGER_4_DATA,                      //FIFOÊúâ4‰∏™Â≠óËäÇÔºåËß¶Âèë‰∏≠Êñ≠
    QL_SPI_TRIGGER_8_DATA,                      //FIFOÊúâ8‰∏™Â≠óËäÇÔºåËß¶Âèë‰∏≠Êñ≠
    QL_SPI_TRIGGER_12_DATA,                     //FIFOÊúâ12‰∏™Â≠óËäÇÔºåËß¶Âèë‰∏≠Êñ≠
}ql_spi_threshold_e;

typedef struct
{
    unsigned int rx_ovf : 1;
    unsigned int tx_th : 1;
    unsigned int tx_dma_done : 1;
    unsigned int rx_th : 1;
    unsigned int rx_dma_done : 1;
    ql_spi_threshold_e tx_threshold;
    ql_spi_threshold_e rx_threshold;
}ql_spi_irq_s;

typedef void (*ql_spi_callback)(ql_spi_irq_s cause);

/*========================================================================
 *  function Definition
 *========================================================================*/
/*****************************************************************
* Function: ql_spi_init
*
* Description:
*   ÂàùÂßãÂåñSPIÊÄªÁ∫ø
* 
* Parameters:
*   port        [in]    SPIÊÄªÁ∫øÈÄâÊã©
*   transmode   [in]    SPIÊÄªÁ∫øÂ∑•‰ΩúÁöÑ‰º†ËæìÊ®°ÂºèÔºå‰ªÖÊîØÊåÅQL_SPI_DIRECT_POLLINGÊ®°Âºè
*   spiclk      [in]    SPIÊÄªÁ∫ø‰º†ËæìÈÄüÁéáÈÖçÁΩÆ
*
* Return:ql_errcode_spi_e
*
*****************************************************************/
ql_errcode_spi_e ql_spi_init(ql_spi_port_e port, ql_spi_transfer_mode_e transmode, ql_spi_clk_e spiclk);

/*****************************************************************
* Function: ql_spi_init_ext
*
* Description:
*   ÂàùÂßãÂåñSPIÊÄªÁ∫øÔºå‰∏éql_spi_initÁõ∏ÊØîÔºåÊúâÊõ¥Â§öÁöÑÈÖçÁΩÆÈÄâÊã©
* 
* Parameters:
*   spi_config  [in]    SPIÊÄªÁ∫øÈÖçÁΩÆ
*
* Return:ql_errcode_spi_e
*
*****************************************************************/
ql_errcode_spi_e ql_spi_init_ext(ql_spi_config_s spi_config);

/*****************************************************************
* Function: ql_spi_write_read
*
* Description:
*   ÂØπSPIÊÄªÁ∫øÊâßË°åÂÜôÂíåËØ?2‰∏™Êìç‰Ω?
* 
* Parameters:
*   port        [in]    SPIÊÄªÁ∫øÈÄâÊã©
*   inbuf       [in]    ÂÜôÂÖ•ÁöÑÊï∞Êç?
*   inlen       [in]    ÂÜôÂÖ•ÁöÑÊï∞ÊçÆÈïøÂ∫?
*   outbuf      [out]   ËØªÂèñÁöÑÊï∞Êç?
*   outlen      [in]    ÈúÄË¶ÅËØªÂèñÁöÑÊï∞ÊçÆÈïøÂ∫¶
*
* Return:ql_errcode_spi_e
*
*****************************************************************/
ql_errcode_spi_e ql_spi_write_read(ql_spi_port_e port, unsigned char *inbuf, unsigned int inlen, unsigned char *outbuf, unsigned int outlen);

/*****************************************************************
* Function: ql_spi_read
*
* Description:
*   ÂØπSPIÊÄªÁ∫øÊâßË°åËØªÊìç‰Ω?
* 
* Parameters:
*   port        [in]    SPIÊÄªÁ∫øÈÄâÊã©
*   buf         [out]   ËØªÂèñÁöÑÊï∞Êç?
*   len         [in]    ÈúÄË¶ÅËØªÂèñÁöÑÊï∞ÊçÆÈïøÂ∫¶
*
* Return:ql_errcode_spi_e
*
*****************************************************************/
ql_errcode_spi_e ql_spi_read(ql_spi_port_e port, unsigned char *buf, unsigned int len);

/*****************************************************************
* Function: ql_spi_write
*
* Description:
*   ÂØπSPIÊÄªÁ∫øÊâßË°åÂÜôÊìç‰Ω?
* 
* Parameters:
*   port        [in]    SPIÊÄªÁ∫øÈÄâÊã©
*   buf         [in]    ÂÜôÂÖ•ÁöÑÊï∞Êç?
*   len         [in]    ÂÜôÂÖ•ÁöÑÊï∞ÊçÆÈïøÂ∫?
*
* Return:ql_errcode_spi_e
*
*****************************************************************/
ql_errcode_spi_e ql_spi_write(ql_spi_port_e port, unsigned char *buf, unsigned int len);

/*****************************************************************
* Function: ql_spi_release
*
* Description:
*   ÈáäÊîæSPIÊÄªÁ∫ø
* 
* Parameters:
*   port        [in]    SPIÊÄªÁ∫øÈÄâÊã©
*
* Return:ql_errcode_spi_e
*
*****************************************************************/
ql_errcode_spi_e ql_spi_release(ql_spi_port_e port);

/*****************************************************************
* Function: ql_spi_cs_low
*
* Description:
*   ÂØπSPIÊÄªÁ∫øÁöÑCSÂºïËÑöÂº∫Âà∂Êãâ‰Ωé
* 
* Parameters:
*   port        [in]    SPIÊÄªÁ∫øÈÄâÊã©
*
* Return:ql_errcode_spi_e
*
*****************************************************************/
ql_errcode_spi_e ql_spi_cs_low(ql_spi_port_e port);

/*****************************************************************
* Function: ql_spi_cs_high
*
* Description:
*   ÂØπSPIÊÄªÁ∫øÁöÑCSÂºïËÑöÂº∫Âà∂ÊãâÈ´ò
* 
* Parameters:
*   port        [in]    SPIÊÄªÁ∫øÈÄâÊã©
*
* Return:ql_errcode_spi_e
*
*****************************************************************/
ql_errcode_spi_e ql_spi_cs_high(ql_spi_port_e port);

/*****************************************************************
* Function: ql_spi_cs_auto
*
* Description:
*   SPIÊÄªÁ∫øÁöÑCSÂºïËÑöÊÅ¢Â§çÊàêÁ≥ªÁªüÊéßÂà∂ÔºåÁ≥ªÁªüÈªòËÆ§CSÂºïËÑöÁî±Á≥ªÁªüÊéßÂà?
* 
* Parameters:
*   port        [in]    SPIÊÄªÁ∫øÈÄâÊã©
*
* Return:ql_errcode_spi_e
*
*****************************************************************/
ql_errcode_spi_e ql_spi_cs_auto(ql_spi_port_e port);


#ifdef __cplusplus
} /*"C" */
#endif

#endif /* QL_API_SPI_H */



